/**
 * SCRIPT DE PRUEBA PARA LEER CATEGOR√çAS DESDE SUPABASE
 * ===================================================
 * 
 * Script que puedes ejecutar en la consola del navegador
 * para probar la conexi√≥n y lectura de categor√≠as desde Supabase
 * 
 * INSTRUCCIONES:
 * 1. Abre la aplicaci√≥n en el navegador
 * 2. Abre las herramientas de desarrollador (F12)
 * 3. Ve a la pesta√±a "Console"
 * 4. Copia y pega este c√≥digo
 * 5. Presiona Enter para ejecutar
 */

console.log('üß™ INICIANDO PRUEBA DE CATEGOR√çAS SUPABASE');
console.log('==========================================');

// Funci√≥n para probar la lectura de categor√≠as
async function probarCategoriasSupabase() {
  try {
    console.log('üì° Conectando a Supabase...');
    
    // Importar la configuraci√≥n de Supabase (si est√° disponible globalmente)
    if (typeof supabase === 'undefined') {
      console.error('‚ùå Supabase no est√° disponible globalmente');
      console.log('üí° Aseg√∫rate de que la aplicaci√≥n est√© ejecut√°ndose');
      return;
    }
    
    console.log('‚úÖ Cliente Supabase encontrado');
    
    // Probar conexi√≥n b√°sica
    console.log('üîç Probando conexi√≥n a la tabla categorias...');
    
    const { data: categorias, error } = await supabase
      .from('categorias')
      .select('*')
      .limit(10);
    
    if (error) {
      console.error('‚ùå Error al consultar categor√≠as:', error);
      console.error('üìã Detalles del error:', {
        message: error.message,
        details: error.details,
        hint: error.hint,
        code: error.code
      });
      return;
    }
    
    console.log('‚úÖ ¬°Consulta exitosa!');
    console.log('üìä Categor√≠as encontradas:', categorias?.length || 0);
    
    if (categorias && categorias.length > 0) {
      console.log('üìÇ Lista de categor√≠as:');
      categorias.forEach((categoria, index) => {
        console.log(`  ${index + 1}. ${categoria.nombre} (ID: ${categoria.id})`);
      });
      
      console.log('üìã Detalles de la primera categor√≠a:');
      console.table(categorias[0]);
    } else {
      console.log('‚ö†Ô∏è No se encontraron categor√≠as en la base de datos');
      console.log('üí° Puedes crear una categor√≠a de prueba ejecutando: crearCategoriaEjemplo()');
    }
    
  } catch (error) {
    console.error('‚ùå Error inesperado:', error);
  }
}

// Funci√≥n para crear una categor√≠a de ejemplo
async function crearCategoriaEjemplo() {
  try {
    console.log('‚ûï Creando categor√≠a de ejemplo...');
    
    const nombreCategoria = `Categor√≠a Prueba ${Date.now()}`;
    
    const { data, error } = await supabase
      .from('categorias')
      .insert([
        {
          nombre: nombreCategoria,
          descripcion: 'Categor√≠a creada desde script de prueba',
          activo: true
        }
      ])
      .select()
      .single();
    
    if (error) {
      console.error('‚ùå Error al crear categor√≠a:', error);
      return;
    }
    
    console.log('‚úÖ Categor√≠a creada exitosamente:');
    console.table(data);
    
    // Volver a probar la lectura
    console.log('üîÑ Probando lectura nuevamente...');
    await probarCategoriasSupabase();
    
  } catch (error) {
    console.error('‚ùå Error creando categor√≠a:', error);
  }
}

// Funci√≥n para verificar la estructura de la tabla
async function verificarEstructuraTabla() {
  try {
    console.log('üîç Verificando estructura de la tabla categorias...');
    
    // Intentar obtener informaci√≥n de la tabla
    const { data, error } = await supabase
      .from('categorias')
      .select('*')
      .limit(1);
    
    if (error) {
      console.error('‚ùå Error verificando tabla:', error);
      
      if (error.code === 'PGRST116') {
        console.log('üìã La tabla "categorias" no existe o no tienes permisos');
        console.log('üí° Posibles soluciones:');
        console.log('   1. Ejecutar el script SQL de creaci√≥n de tablas');
        console.log('   2. Verificar permisos RLS en Supabase');
        console.log('   3. Comprobar que el nombre de la tabla sea correcto');
      }
      
      return;
    }
    
    console.log('‚úÖ Tabla categorias accesible');
    
    if (data && data.length > 0) {
      console.log('üìä Estructura de la tabla (basada en primer registro):');
      const campos = Object.keys(data[0]);
      campos.forEach(campo => {
        const valor = data[0][campo];
        const tipo = typeof valor;
        console.log(`  - ${campo}: ${tipo} (ejemplo: ${valor})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Error verificando estructura:', error);
  }
}

// Funci√≥n principal que ejecuta todas las pruebas
async function ejecutarPruebas() {
  console.log('üöÄ EJECUTANDO PRUEBAS COMPLETAS');
  console.log('===============================');
  
  await verificarEstructuraTabla();
  console.log('');
  await probarCategoriasSupabase();
  
  console.log('');
  console.log('üéØ PRUEBAS COMPLETADAS');
  console.log('======================');
  console.log('üí° Funciones disponibles:');
  console.log('   - probarCategoriasSupabase()');
  console.log('   - crearCategoriaEjemplo()');
  console.log('   - verificarEstructuraTabla()');
  console.log('   - ejecutarPruebas()');
}

// Ejecutar pruebas autom√°ticamente
ejecutarPruebas();
