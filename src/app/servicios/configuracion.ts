import { Injectable, signal } from '@angular/core';
import { supabase, TABLES } from '../config/supabase.config';

/**
 * @interface ConfiguracionSitio
 * Define la estructura de los datos de configuraci√≥n.
 * Esto nos ayuda a mantener la consistencia de los datos.
 */
export interface ConfiguracionSitio {
  titulo: string;
  subtitulo: string;
  // En el futuro, podr√≠amos a√±adir m√°s campos como:
  // logoUrl: string;
  // colorPrincipal: string;
}

/**
 * @class ConfiguracionService
 * Gestiona la configuraci√≥n global del sitio almacenada en Supabase.
 */
@Injectable({
  providedIn: 'root',
})
export class ConfiguracionService {
  // --- SE√ëAL DE ESTADO (SIGNAL) ---
  /**
   * @signal configuracionSignal
   * Almacena la configuraci√≥n actual del sitio.
   * Se inicializa con un valor por defecto mientras se cargan los datos.
   */
  configuracionSignal = signal<ConfiguracionSitio>({
    titulo: 'ALED2025 - E-commerce',
    subtitulo: 'Proyecto desarrollado con Angular y Supabase',
  });

  constructor() {
    console.log('‚öôÔ∏è Inicializando ConfiguracionService con Supabase...');
    // --- L√ìGICA DE ARRANQUE: CARGAR CONFIGURACI√ìN ---
    this.cargarConfiguracion();
  }

  /**
   * Carga la configuraci√≥n desde Supabase.
   * @private
   */
  private async cargarConfiguracion(): Promise<void> {
    try {
      console.log('üìã Cargando configuraci√≥n desde Supabase...');
      
      // Intentar cargar configuraci√≥n desde Supabase
      const { data, error } = await supabase
        .from(TABLES.CONFIGURACION)
        .select('*')
        .eq('clave', 'sitio')
        .single();

      if (error && error.code !== 'PGRST116' && error.code !== 'PGRST205') {
        // Error diferente a "no encontrado" o "tabla no existe"
        console.error('‚ùå Error al cargar configuraci√≥n:', error);
        // No lanzar error, usar configuraci√≥n por defecto
        console.log('‚ö†Ô∏è Usando configuraci√≥n por defecto debido a error');
        return;
      }

      if (data) {
        // Si existe configuraci√≥n, la usamos
        console.log('‚úÖ Configuraci√≥n cargada desde Supabase');
        this.configuracionSignal.set({
          titulo: data.titulo || 'ALED2025 - E-commerce',
          subtitulo: data.subtitulo || 'Proyecto desarrollado con Angular y Supabase'
        });
      } else {
        // Si no existe, crear configuraci√≥n por defecto
        console.log('üìù Creando configuraci√≥n por defecto...');
        await this.crearConfiguracionPorDefecto();
      }

    } catch (error: any) {
      console.error('‚ùå Error al cargar configuraci√≥n:', error);
      // Mantener valores por defecto en caso de error
      this.configuracionSignal.set({
        titulo: 'ALED2025 - E-commerce',
        subtitulo: 'Proyecto desarrollado con Angular y Supabase'
      });
    }
  }

  /**
   * Crea la configuraci√≥n por defecto en Supabase.
   * @private
   */
  private async crearConfiguracionPorDefecto(): Promise<void> {
    try {
      const configuracionDefecto = {
        clave: 'sitio',
        titulo: 'ALED2025 - E-commerce',
        subtitulo: 'Proyecto desarrollado con Angular y Supabase por Cancelo Julian & Nicolas Otero'
      };

      const { error } = await supabase
        .from(TABLES.CONFIGURACION)
        .insert(configuracionDefecto);

      if (error) {
        console.error('‚ùå Error al crear configuraci√≥n por defecto:', error);
      } else {
        console.log('‚úÖ Configuraci√≥n por defecto creada');
        this.configuracionSignal.set({
          titulo: configuracionDefecto.titulo,
          subtitulo: configuracionDefecto.subtitulo
        });
      }
    } catch (error: any) {
      console.error('‚ùå Error al crear configuraci√≥n por defecto:', error);
    }
  }

  /**
   * Actualiza la configuraci√≥n en Supabase.
   * @param nuevosDatos - Un objeto parcial con los datos a actualizar.
   * @returns Una promesa que se resuelve cuando la operaci√≥n de escritura finaliza.
   */
  async actualizarConfiguracion(nuevosDatos: Partial<ConfiguracionSitio>): Promise<void> {
    try {
      console.log('üíæ Actualizando configuraci√≥n en Supabase...');
      
      const { error } = await supabase
        .from(TABLES.CONFIGURACION)
        .update(nuevosDatos)
        .eq('clave', 'sitio');

      if (error) {
        console.error('‚ùå Error al actualizar configuraci√≥n:', error);
        throw error;
      }

      console.log('‚úÖ Configuraci√≥n actualizada correctamente');
      
      // Actualizar la se√±al local
      const configuracionActual = this.configuracionSignal();
      this.configuracionSignal.set({
        ...configuracionActual,
        ...nuevosDatos
      });

    } catch (error: any) {
      console.error('‚ùå Error al actualizar configuraci√≥n:', error);
      throw error;
    }
  }
}
