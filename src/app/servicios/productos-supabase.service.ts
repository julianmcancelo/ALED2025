import { Injectable } from '@angular/core';
import { Observable, from, BehaviorSubject } from 'rxjs';
import { map, catchError, tap } from 'rxjs/operators';
import { SupabaseService } from './supabase.service';
import { supabase, SupabaseProducto, SupabaseCategoria, TABLES } from '../config/supabase.config';

/**
 * SERVICIO DE PRODUCTOS CON SUPABASE PARA ALED2025
 * ================================================
 * 
 * Servicio de gesti√≥n de productos migrado de Firebase a Supabase
 * Incluye funcionalidades avanzadas de b√∫squeda y tiempo real
 * 
 * DESARROLLADO POR: Cancelo Julian & Nicolas Otero
 * INSTITUTO: Instituto Beltr√°n
 * MATERIA: ALED III - T.A.S.
 */

export interface ProductoConCategoria extends SupabaseProducto {
  categoria?: {
    id: string;
    nombre: string;
  };
}

@Injectable({
  providedIn: 'root'
})
export class ProductosSupabaseService {
  
  // üìä ESTADO REACTIVO
  private productosSubject = new BehaviorSubject<ProductoConCategoria[]>([]);
  public productos$ = this.productosSubject.asObservable();
  
  private categoriasSubject = new BehaviorSubject<SupabaseCategoria[]>([]);
  public categorias$ = this.categoriasSubject.asObservable();

  // üîÑ SUSCRIPCIONES TIEMPO REAL
  private productosSubscription: any;
  private categoriasSubscription: any;

  constructor(private supabaseService: SupabaseService) {
    console.log('üì¶ Inicializando ProductosSupabaseService...');
    this.initializeRealtimeSubscriptions();
    this.loadInitialData();
  }

  // üöÄ INICIALIZACI√ìN

  /**
   * Configura suscripciones en tiempo real
   */
  private initializeRealtimeSubscriptions(): void {
    console.log('üîÑ Configurando suscripciones en tiempo real...');
    
    // Suscripci√≥n a cambios en productos
    this.productosSubscription = supabase
      .channel('productos_changes')
      .on('postgres_changes', 
        { event: '*', schema: 'public', table: TABLES.PRODUCTOS }, 
        () => {
          console.log('üîÑ Cambio detectado en productos, recargando...');
          this.loadProductos();
        }
      )
      .subscribe();

    // Suscripci√≥n a cambios en categor√≠as
    this.categoriasSubscription = supabase
      .channel('categorias_changes')
      .on('postgres_changes', 
        { event: '*', schema: 'public', table: TABLES.CATEGORIAS }, 
        () => {
          console.log('üîÑ Cambio detectado en categor√≠as, recargando...');
          this.loadCategorias();
        }
      )
      .subscribe();
  }

  /**
   * Carga datos iniciales
   */
  private async loadInitialData(): Promise<void> {
    try {
      await Promise.all([
        this.loadProductos(),
        this.loadCategorias()
      ]);
      console.log('‚úÖ Datos iniciales cargados');
    } catch (error) {
      console.error('‚ùå Error cargando datos iniciales:', error);
    }
  }

  /**
   * Carga productos con informaci√≥n de categor√≠a
   */
  private async loadProductos(): Promise<void> {
    try {
      const { data, error } = await supabase
        .from(TABLES.PRODUCTOS)
        .select(`
          *,
          categoria:categorias(id, nombre)
        `)
        .order('created_at', { ascending: false });

      if (error) throw error;

      this.productosSubject.next(data || []);
      console.log(`üì¶ ${data?.length || 0} productos cargados`);
    } catch (error) {
      console.error('‚ùå Error cargando productos:', error);
    }
  }

  /**
   * Carga categor√≠as activas
   */
  private async loadCategorias(): Promise<void> {
    try {
      const { data, error } = await supabase
        .from(TABLES.CATEGORIAS)
        .select('*')
        .eq('activa', true)
        .order('nombre', { ascending: true });

      if (error) throw error;

      this.categoriasSubject.next(data || []);
      console.log(`üóÇÔ∏è ${data?.length || 0} categor√≠as cargadas`);
    } catch (error) {
      console.error('‚ùå Error cargando categor√≠as:', error);
    }
  }

  // üìñ M√âTODOS DE LECTURA

  /**
   * Obtiene todos los productos
   */
  obtenerProductos(): Observable<ProductoConCategoria[]> {
    return this.productos$;
  }

  /**
   * Obtiene productos activos
   */
  obtenerProductosActivos(): Observable<ProductoConCategoria[]> {
    return this.productos$.pipe(
      map(productos => productos.filter(p => p.activo))
    );
  }

  /**
   * Obtiene productos destacados
   */
  obtenerProductosDestacados(): Observable<ProductoConCategoria[]> {
    return this.productos$.pipe(
      map(productos => productos.filter(p => p.activo && p.es_destacado))
    );
  }

  /**
   * Obtiene un producto por ID
   */
  obtenerProductoPorId(id: string): Observable<ProductoConCategoria | null> {
    console.log(`üîç Buscando producto por ID: ${id}`);
    
    return from(supabase
      .from(TABLES.PRODUCTOS)
      .select(`
        *,
        categoria:categorias(id, nombre)
      `)
      .eq('id', id)
      .single()
    ).pipe(
      map(({ data, error }) => {
        if (error) {
          console.error('‚ùå Error obteniendo producto por ID:', error);
          return null;
        }
        console.log('‚úÖ Producto encontrado:', data?.nombre);
        return data;
      }),
      catchError((error) => {
        console.error('‚ùå Error obteniendo producto:', error);
        return from([null]);
      })
    );
  }

  /**
   * Busca productos por t√©rmino
   */
  buscarProductos(termino: string): Observable<ProductoConCategoria[]> {
    if (!termino || termino.trim() === '') {
      return this.obtenerProductosActivos();
    }

    console.log(`üîç Buscando productos con t√©rmino: "${termino}"`);
    
    return from(supabase
      .from(TABLES.PRODUCTOS)
      .select(`
        *,
        categoria:categorias(id, nombre)
      `)
      .eq('activo', true)
      .or(`nombre.ilike.%${termino}%,descripcion.ilike.%${termino}%`)
      .order('created_at', { ascending: false })
    ).pipe(
      map(({ data, error }) => {
        if (error) throw error;
        console.log(`‚úÖ ${data?.length || 0} productos encontrados para "${termino}"`);
        return data || [];
      }),
      catchError((error) => {
        console.error('‚ùå Error buscando productos:', error);
        return from([[]]);
      })
    );
  }

  /**
   * Obtiene productos por categor√≠a
   */
  obtenerProductosPorCategoria(categoriaId: string): Observable<ProductoConCategoria[]> {
    console.log(`üóÇÔ∏è Obteniendo productos de categor√≠a: ${categoriaId}`);
    
    return from(supabase
      .from(TABLES.PRODUCTOS)
      .select(`
        *,
        categoria:categorias(id, nombre)
      `)
      .eq('activo', true)
      .eq('categoria_id', categoriaId)
      .order('created_at', { ascending: false })
    ).pipe(
      map(({ data, error }) => {
        if (error) throw error;
        console.log(`‚úÖ ${data?.length || 0} productos encontrados en categor√≠a`);
        return data || [];
      }),
      catchError((error) => {
        console.error('‚ùå Error obteniendo productos por categor√≠a:', error);
        return from([[]]);
      })
    );
  }

  // ‚úèÔ∏è M√âTODOS DE ESCRITURA

  /**
   * Crea un nuevo producto
   */
  crearProducto(producto: Omit<SupabaseProducto, 'id' | 'created_at' | 'updated_at'>): Observable<SupabaseProducto> {
    console.log('‚ûï Creando producto:', producto.nombre);
    
    return from(supabase
      .from(TABLES.PRODUCTOS)
      .insert(producto)
      .select()
      .single()
    ).pipe(
      map(({ data, error }) => {
        if (error) throw error;
        console.log('‚úÖ Producto creado exitosamente:', data.nombre);
        return data;
      }),
      catchError((error) => {
        console.error('‚ùå Error creando producto:', error);
        console.error('‚ùå Detalles del error:', {
          message: error.message,
          details: error.details,
          hint: error.hint,
          code: error.code
        });
        throw error;
      })
    );
  }

  /**
   * Actualiza un producto existente
   */
  actualizarProducto(id: string, datos: Partial<SupabaseProducto>): Observable<SupabaseProducto> {
    console.log(`‚úèÔ∏è Actualizando producto ID: ${id}`);
    
    return from(supabase
      .from(TABLES.PRODUCTOS)
      .update(datos)
      .eq('id', id)
      .select()
      .single()
    ).pipe(
      map(({ data, error }) => {
        if (error) throw error;
        console.log('‚úÖ Producto actualizado exitosamente:', data.nombre);
        return data;
      }),
      catchError((error) => {
        console.error('‚ùå Error actualizando producto:', error);
        throw error;
      })
    );
  }

  /**
   * Elimina un producto
   */
  eliminarProducto(id: string): Observable<boolean> {
    console.log(`üóëÔ∏è Eliminando producto ID: ${id}`);
    
    return from(supabase
      .from(TABLES.PRODUCTOS)
      .delete()
      .eq('id', id)
    ).pipe(
      map(({ error }) => {
        if (error) throw error;
        console.log('‚úÖ Producto eliminado exitosamente');
        return true;
      }),
      catchError((error) => {
        console.error('‚ùå Error eliminando producto:', error);
        throw error;
      })
    );
  }

  /**
   * Actualiza el stock de un producto
   */
  actualizarStock(id: string, nuevoStock: number): Observable<SupabaseProducto> {
    if (nuevoStock < 0) {
      throw new Error('El stock no puede ser negativo');
    }

    console.log(`üìä Actualizando stock del producto ${id} a ${nuevoStock}`);
    
    return this.actualizarProducto(id, { stock: nuevoStock });
  }

  /**
   * Cambia el estado activo de un producto
   */
  cambiarEstadoProducto(id: string, activo: boolean): Observable<SupabaseProducto> {
    console.log(`üîÑ Cambiando estado del producto ${id} a ${activo ? 'activo' : 'inactivo'}`);
    
    return this.actualizarProducto(id, { activo });
  }

  // üóÇÔ∏è M√âTODOS DE CATEGOR√çAS

  /**
   * Obtiene todas las categor√≠as
   */
  obtenerCategorias(): Observable<SupabaseCategoria[]> {
    return this.categorias$;
  }

  /**
   * Crea una nueva categor√≠a
   */
  crearCategoria(nombre: string, descripcion?: string): Observable<SupabaseCategoria> {
    console.log('‚ûï Creando categor√≠a:', nombre);
    
    return from(supabase
      .from(TABLES.CATEGORIAS)
      .insert({ nombre, descripcion, activa: true })
      .select()
      .single()
    ).pipe(
      map(({ data, error }) => {
        if (error) throw error;
        console.log('‚úÖ Categor√≠a creada exitosamente:', data.nombre);
        return data;
      }),
      catchError((error) => {
        console.error('‚ùå Error creando categor√≠a:', error);
        throw error;
      })
    );
  }

  /**
   * Actualiza una categor√≠a
   */
  actualizarCategoria(id: string, nombre: string, descripcion?: string): Observable<SupabaseCategoria> {
    console.log(`‚úèÔ∏è Actualizando categor√≠a ID: ${id}`);
    
    return from(supabase
      .from(TABLES.CATEGORIAS)
      .update({ nombre, descripcion })
      .eq('id', id)
      .select()
      .single()
    ).pipe(
      map(({ data, error }) => {
        if (error) throw error;
        console.log('‚úÖ Categor√≠a actualizada exitosamente:', data.nombre);
        return data;
      }),
      catchError((error) => {
        console.error('‚ùå Error actualizando categor√≠a:', error);
        throw error;
      })
    );
  }

  /**
   * Elimina una categor√≠a
   */
  eliminarCategoria(id: string): Observable<boolean> {
    console.log(`üóëÔ∏è Eliminando categor√≠a ID: ${id}`);
    
    return from(supabase
      .from(TABLES.CATEGORIAS)
      .delete()
      .eq('id', id)
    ).pipe(
      map(({ error }) => {
        if (error) throw error;
        console.log('‚úÖ Categor√≠a eliminada exitosamente');
        return true;
      }),
      catchError((error) => {
        console.error('‚ùå Error eliminando categor√≠a:', error);
        throw error;
      })
    );
  }

  // üìä M√âTODOS DE ESTAD√çSTICAS

  /**
   * Obtiene estad√≠sticas de productos
   */
  obtenerEstadisticas(): Observable<any> {
    return this.productos$.pipe(
      map(productos => {
        const total = productos.length;
        const activos = productos.filter(p => p.activo).length;
        const destacados = productos.filter(p => p.es_destacado).length;
        const sinStock = productos.filter(p => (p.stock || 0) === 0).length;
        
        return {
          total,
          activos,
          inactivos: total - activos,
          destacados,
          sinStock,
          conStock: total - sinStock
        };
      })
    );
  }

  // üßπ LIMPIEZA

  /**
   * Limpia las suscripciones al destruir el servicio
   */
  ngOnDestroy(): void {
    if (this.productosSubscription) {
      this.productosSubscription.unsubscribe();
    }
    if (this.categoriasSubscription) {
      this.categoriasSubscription.unsubscribe();
    }
    console.log('üßπ Suscripciones de tiempo real limpiadas');
  }
}
