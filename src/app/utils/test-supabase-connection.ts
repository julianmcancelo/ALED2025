import { supabase, TABLES } from '../config/supabase.config';
import { CategoriaService } from '../servicios/categoria.service';

/**
 * UTILIDADES PARA PROBAR CONEXI√ìN CON SUPABASE
 * ============================================
 * 
 * Funciones utilitarias para probar la conexi√≥n y lectura
 * de datos desde Supabase de forma directa
 */

export class TestSupabaseConnection {
  
  /**
   * Prueba la conexi√≥n b√°sica con Supabase
   */
  static async probarConexionBasica(): Promise<boolean> {
    try {
      console.log('üîç Probando conexi√≥n b√°sica con Supabase...');
      
      // Intentar una consulta simple
      const { data, error } = await supabase
        .from('categorias')
        .select('count(*)')
        .limit(1);
      
      if (error) {
        console.error('‚ùå Error en conexi√≥n b√°sica:', error);
        return false;
      }
      
      console.log('‚úÖ Conexi√≥n b√°sica exitosa');
      return true;
      
    } catch (error) {
      console.error('‚ùå Error inesperado en conexi√≥n:', error);
      return false;
    }
  }
  
  /**
   * Prueba la lectura de categor√≠as directamente
   */
  static async probarLecturaCategorias(): Promise<void> {
    try {
      console.log('üìÇ Probando lectura de categor√≠as...');
      
      const { data: categorias, error } = await supabase
        .from(TABLES.CATEGORIAS)
        .select('*')
        .eq('activo', true)
        .order('nombre', { ascending: true });
      
      if (error) {
        console.error('‚ùå Error leyendo categor√≠as:', error);
        console.error('üìã Detalles:', {
          message: error.message,
          code: error.code,
          details: error.details,
          hint: error.hint
        });
        return;
      }
      
      console.log('‚úÖ Lectura exitosa!');
      console.log(`üìä Categor√≠as encontradas: ${categorias?.length || 0}`);
      
      if (categorias && categorias.length > 0) {
        console.log('üìã Lista de categor√≠as:');
        categorias.forEach((cat, index) => {
          console.log(`  ${index + 1}. ${cat.nombre} (ID: ${cat.id})`);
        });
        
        console.log('üìÑ Primera categor√≠a completa:');
        console.table(categorias[0]);
      } else {
        console.log('‚ö†Ô∏è No hay categor√≠as en la base de datos');
      }
      
    } catch (error) {
      console.error('‚ùå Error inesperado:', error);
    }
  }
  
  /**
   * Prueba usando el servicio de categor√≠as
   */
  static probarConServicio(): void {
    console.log('üîß Probando con CategoriaService...');
    
    const categoriaService = new CategoriaService();
    
    categoriaService.obtenerCategorias().subscribe({
      next: (categorias) => {
        console.log('‚úÖ Servicio funcionando correctamente!');
        console.log(`üìä Categor√≠as obtenidas: ${categorias.length}`);
        
        if (categorias.length > 0) {
          console.log('üìã Categor√≠as:');
          categorias.forEach((cat, index) => {
            console.log(`  ${index + 1}. ${cat.nombre}`);
          });
        }
      },
      error: (error) => {
        console.error('‚ùå Error en el servicio:', error);
      }
    });
  }
  
  /**
   * Crea una categor√≠a de prueba
   */
  static async crearCategoriaEjemplo(): Promise<void> {
    try {
      console.log('‚ûï Creando categor√≠a de ejemplo...');
      
      const nombreCategoria = `Categor√≠a Ejemplo ${Date.now()}`;
      
      const { data, error } = await supabase
        .from(TABLES.CATEGORIAS)
        .insert([
          {
            nombre: nombreCategoria,
            descripcion: 'Categor√≠a creada para pruebas',
            activo: true
          }
        ])
        .select()
        .single();
      
      if (error) {
        console.error('‚ùå Error creando categor√≠a:', error);
        return;
      }
      
      console.log('‚úÖ Categor√≠a creada exitosamente:');
      console.table(data);
      
      // Probar lectura nuevamente
      await this.probarLecturaCategorias();
      
    } catch (error) {
      console.error('‚ùå Error inesperado creando categor√≠a:', error);
    }
  }
  
  /**
   * Verifica la estructura de la tabla categorias
   */
  static async verificarEstructuraTabla(): Promise<void> {
    try {
      console.log('üîç Verificando estructura de tabla categorias...');
      
      const { data, error } = await supabase
        .from(TABLES.CATEGORIAS)
        .select('*')
        .limit(1);
      
      if (error) {
        console.error('‚ùå Error verificando tabla:', error);
        
        if (error.code === 'PGRST116') {
          console.log('üìã Posibles problemas:');
          console.log('   1. La tabla "categorias" no existe');
          console.log('   2. No tienes permisos para acceder');
          console.log('   3. RLS est√° bloqueando el acceso');
          console.log('');
          console.log('üí° Soluciones:');
          console.log('   1. Ejecutar script de creaci√≥n de tablas');
          console.log('   2. Verificar pol√≠ticas RLS en Supabase');
          console.log('   3. Comprobar configuraci√≥n de permisos');
        }
        
        return;
      }
      
      console.log('‚úÖ Tabla accesible');
      
      if (data && data.length > 0) {
        console.log('üìä Campos de la tabla:');
        Object.keys(data[0]).forEach(campo => {
          const valor = data[0][campo];
          console.log(`  - ${campo}: ${typeof valor} (ej: ${valor})`);
        });
      } else {
        console.log('üì≠ Tabla vac√≠a pero accesible');
      }
      
    } catch (error) {
      console.error('‚ùå Error verificando estructura:', error);
    }
  }
  
  /**
   * Ejecuta todas las pruebas en secuencia
   */
  static async ejecutarTodasLasPruebas(): Promise<void> {
    console.log('üöÄ EJECUTANDO PRUEBAS COMPLETAS DE SUPABASE');
    console.log('==========================================');
    
    // 1. Conexi√≥n b√°sica
    const conexionOk = await this.probarConexionBasica();
    if (!conexionOk) {
      console.log('‚ùå Conexi√≥n b√°sica fall√≥. Deteniendo pruebas.');
      return;
    }
    
    console.log('');
    
    // 2. Verificar estructura
    await this.verificarEstructuraTabla();
    
    console.log('');
    
    // 3. Probar lectura
    await this.probarLecturaCategorias();
    
    console.log('');
    
    // 4. Probar servicio
    this.probarConServicio();
    
    console.log('');
    console.log('üéØ PRUEBAS COMPLETADAS');
    console.log('======================');
    console.log('üí° Para crear una categor√≠a de ejemplo:');
    console.log('   TestSupabaseConnection.crearCategoriaEjemplo()');
  }
}

// Funci√≥n global para usar en la consola del navegador
(window as any).testSupabase = TestSupabaseConnection;
