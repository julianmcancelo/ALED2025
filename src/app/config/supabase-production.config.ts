import { createClient } from '@supabase/supabase-js';

/**
 * CONFIGURACI√ìN DE SUPABASE PARA PRODUCCI√ìN - ALED2025
 * ====================================================
 * 
 * Configuraci√≥n optimizada y segura para ambiente de producci√≥n
 * Incluye autenticaci√≥n habilitada y configuraciones de seguridad
 * 
 * DESARROLLADO POR: Cancelo Julian & Nicolas Otero
 * INSTITUTO: Instituto Beltr√°n
 * MATERIA: ALED III - T.A.S.
 */

// üîë CONFIGURACI√ìN DE PRODUCCI√ìN
// ‚ö†Ô∏è CAMBIAR ESTAS CREDENCIALES EN PRODUCCI√ìN
const supabaseUrl = 'https://gyhzptzltqrxvgmwmkzm.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imd5aHpwdHpsdHFyeHZnbXdta3ptIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjAwODAyOTgsImV4cCI6MjA3NTY1NjI5OH0.rSrOQ4NWvwEU0Ec2HJTNYtpV7vp_0limf5Naf4ow7LM';

// üåê CLIENTE SUPABASE PARA PRODUCCI√ìN
export const supabaseProduction = createClient(supabaseUrl, supabaseKey, {
  auth: {
    // ‚úÖ AUTENTICACI√ìN HABILITADA PARA PRODUCCI√ìN
    persistSession: true, // Mantener sesi√≥n persistente
    autoRefreshToken: true, // Renovar tokens autom√°ticamente
    detectSessionInUrl: true, // Detectar sesi√≥n en URL (para magic links)
    flowType: 'pkce', // Usar PKCE para mayor seguridad
    
    // üîí CONFIGURACI√ìN DE SEGURIDAD
    storage: {
      getItem: (key) => {
        // Encriptar datos en localStorage para producci√≥n
        const item = localStorage.getItem(key);
        return item ? atob(item) : null; // Decodificar base64
      },
      setItem: (key, value) => {
        // Encriptar datos antes de guardar
        localStorage.setItem(key, btoa(value)); // Codificar en base64
      },
      removeItem: (key) => {
        localStorage.removeItem(key);
      }
    }
  },
  
  realtime: {
    // üì° CONFIGURACI√ìN OPTIMIZADA PARA PRODUCCI√ìN
    params: {
      eventsPerSecond: 5, // Reducir eventos para mejor performance
      heartbeatIntervalMs: 30000, // 30 segundos
      reconnectAfterMs: (tries: number) => Math.min(tries * 1000, 30000) // Backoff exponencial
    }
  },
  
  global: {
    // üåç HEADERS GLOBALES PARA PRODUCCI√ìN
    headers: {
      'X-Client-Info': 'aled2025-production',
      'X-Client-Version': '1.0.0',
      'Cache-Control': 'no-cache'
    },
    
    // üîß CONFIGURACI√ìN DE FETCH
    fetch: (url, options = {}) => {
      return fetch(url, {
        ...options,
        // Agregar timeout para requests
        signal: AbortSignal.timeout(30000) // 30 segundos timeout
      });
    }
  },
  
  // üìä CONFIGURACI√ìN DE BASE DE DATOS
  db: {
    schema: 'public'
  }
});

// üõ°Ô∏è CONFIGURACI√ìN DE SEGURIDAD ADICIONAL
export const PRODUCTION_CONFIG = {
  // üìÅ STORAGE CONFIGURATION
  STORAGE: {
    MAX_FILE_SIZE: 10 * 1024 * 1024, // 10MB
    ALLOWED_TYPES: ['image/jpeg', 'image/png', 'image/webp'],
    COMPRESSION_QUALITY: 0.8, // 80% calidad para optimizar tama√±o
    MAX_UPLOADS_PER_HOUR: 50,
    BUCKET_NAME: 'productos-imagenes'
  },
  
  // üîê AUTHENTICATION
  AUTH: {
    SESSION_TIMEOUT: 24 * 60 * 60 * 1000, // 24 horas
    REFRESH_THRESHOLD: 60 * 1000, // Renovar 1 minuto antes de expirar
    MAX_LOGIN_ATTEMPTS: 5,
    LOCKOUT_DURATION: 15 * 60 * 1000 // 15 minutos
  },
  
  // üì° API LIMITS
  API: {
    RATE_LIMIT_PER_MINUTE: 100,
    MAX_CONCURRENT_REQUESTS: 10,
    RETRY_ATTEMPTS: 3,
    RETRY_DELAY: 1000 // 1 segundo
  },
  
  // üîç MONITORING
  MONITORING: {
    LOG_LEVEL: 'error', // Solo errores en producci√≥n
    ENABLE_ANALYTICS: true,
    ERROR_REPORTING: true,
    PERFORMANCE_MONITORING: true
  }
};

// üìä TIPOS DE DATOS PARA PRODUCCI√ìN (con validaciones)
export interface ProductoProduccion extends SupabaseProducto {
  // Campos adicionales para producci√≥n
  seo_title?: string;
  seo_description?: string;
  meta_keywords?: string[];
  imagen_optimizada_url?: string;
  imagen_thumbnail_url?: string;
  audit_created_by?: string;
  audit_updated_by?: string;
}

export interface UsuarioProduccion extends SupabaseUsuario {
  // Campos adicionales para producci√≥n
  last_login?: string;
  login_attempts?: number;
  locked_until?: string;
  email_verified?: boolean;
  two_factor_enabled?: boolean;
  preferences?: {
    notifications: boolean;
    marketing_emails: boolean;
    theme: 'light' | 'dark';
    language: string;
  };
}

// üîß UTILIDADES PARA PRODUCCI√ìN
export class ProductionUtils {
  
  /**
   * Valida y comprime imagen antes de subir
   */
  static async validateAndCompressImage(file: File): Promise<File> {
    // Validar tama√±o
    if (file.size > PRODUCTION_CONFIG.STORAGE.MAX_FILE_SIZE) {
      throw new Error(`Archivo demasiado grande. M√°ximo ${PRODUCTION_CONFIG.STORAGE.MAX_FILE_SIZE / 1024 / 1024}MB`);
    }
    
    // Validar tipo
    if (!PRODUCTION_CONFIG.STORAGE.ALLOWED_TYPES.includes(file.type)) {
      throw new Error(`Tipo de archivo no permitido: ${file.type}`);
    }
    
    // Comprimir imagen (implementar con canvas o librer√≠a)
    return file; // Por ahora retornar original
  }
  
  /**
   * Genera nombre de archivo seguro para producci√≥n
   */
  static generateSecureFileName(originalName: string, userId: string): string {
    const timestamp = Date.now();
    const randomId = Math.random().toString(36).substring(2, 15);
    const extension = originalName.split('.').pop()?.toLowerCase() || 'jpg';
    const sanitizedName = originalName
      .replace(/[^a-zA-Z0-9.-]/g, '_')
      .toLowerCase()
      .substring(0, 50);
    
    return `productos/${timestamp}_${userId}_${randomId}_${sanitizedName}.${extension}`;
  }
  
  /**
   * Maneja errores de forma segura en producci√≥n
   */
  static handleProductionError(error: any, context: string): void {
    // Log del error (sin informaci√≥n sensible)
    console.error(`[PRODUCTION ERROR] ${context}:`, {
      message: error.message,
      timestamp: new Date().toISOString(),
      context
    });
    
    // Reportar a servicio de monitoreo (Sentry, etc.)
    if (PRODUCTION_CONFIG.MONITORING.ERROR_REPORTING) {
      // Implementar reporte de errores
    }
  }
  
  /**
   * Verifica l√≠mites de rate limiting
   */
  static checkRateLimit(userId: string, action: string): boolean {
    // Implementar verificaci√≥n de rate limiting
    // Por ahora retornar true
    return true;
  }
}

// üìù CONFIGURACI√ìN DE TABLAS (igual que desarrollo)
export const TABLES = {
  PRODUCTOS: 'productos',
  CATEGORIAS: 'categorias',
  USUARIOS: 'usuarios',
  PEDIDOS: 'pedidos',
  ITEMS_PEDIDO: 'items_pedido',
  NOVEDADES: 'novedades',
  CONFIGURACION: 'configuracion',
  // Tablas adicionales para producci√≥n
  AUDIT_LOG: 'audit_log',
  STORAGE_AUDIT: 'storage_audit_log',
  RATE_LIMITS: 'upload_rate_limit'
} as const;

// üéØ CONFIGURACI√ìN DE STORAGE PARA PRODUCCI√ìN
export const STORAGE_BUCKETS = {
  PRODUCTOS: 'productos-imagenes',
  AVATARES: 'avatares-usuarios',
  DOCUMENTOS: 'documentos-sistema', // Bucket adicional para producci√≥n
  BACKUPS: 'backups-automaticos' // Bucket para backups
} as const;

// Importar tipos base
import { 
  SupabaseProducto, 
  SupabaseCategoria, 
  SupabaseUsuario 
} from './supabase.config';

console.log('üöÄ Configuraci√≥n de Supabase PRODUCCI√ìN cargada para ALED2025');
console.log('üîí Modo: PRODUCCI√ìN - Seguridad habilitada');
console.log('üìä Monitoreo:', PRODUCTION_CONFIG.MONITORING.ENABLE_ANALYTICS ? 'Habilitado' : 'Deshabilitado');
