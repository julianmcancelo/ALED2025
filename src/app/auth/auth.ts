/**
 * ============================================================================
 * SERVICIO DE AUTENTICACI√ìN
 * ============================================================================
 * 
 * Este servicio maneja toda la l√≥gica de autenticaci√≥n de usuarios:
 * - Login (inicio de sesi√≥n)
 * - Logout (cierre de sesi√≥n)
 * - Persistencia de sesi√≥n en localStorage
 * - Actualizaci√≥n en tiempo real con Firestore
 * - Gesti√≥n del estado del usuario actual
 * 
 * Autores: Cancelo Julian & Nicolas Otero
 * Materia: ALED III - T.A.S.
 * ============================================================================
 */

import { Injectable, inject, signal } from '@angular/core';
import { UserService } from '../servicios/user';
import { Router } from '@angular/router';
import * as bcrypt from 'bcryptjs';  // Librer√≠a para hash de contrase√±as
import { Firestore, doc, onSnapshot, DocumentSnapshot } from '@angular/fire/firestore';
import { Unsubscribe } from 'firebase/firestore';

/**
 * Interfaz que define la estructura de un usuario en nuestra aplicaci√≥n.
 * 
 * Esta interfaz asegura que todos los objetos de usuario tengan
 * las propiedades necesarias y del tipo correcto (type safety).
 */
export interface AppUser {
  id: string;                    // ID √∫nico del usuario en Firestore
  email: string | null;          // Email del usuario (puede ser null)
  nombre: string;                // Nombre del usuario
  apellido: string;              // Apellido del usuario
  rol: 'admin' | 'usuario';      // Rol: solo puede ser 'admin' o 'usuario'
  password?: string;             // Contrase√±a hasheada (opcional para seguridad)
  
  // --- Campos opcionales para direcci√≥n de entrega ---
  // El s√≠mbolo '?' indica que son opcionales (pueden no existir)
  domicilio?: string;            // Campo legacy (compatibilidad con versiones anteriores)
  direccion?: string;            // Nueva direcci√≥n (formato mejorado)
  ciudad?: string;               // Ciudad de env√≠o
  codigoPostal?: string;         // C√≥digo postal
  telefono?: string;             // Tel√©fono de contacto
}

/**
 * Servicio Injectable de Angular para gesti√≥n de autenticaci√≥n.
 * 
 * @Injectable({ providedIn: 'root' }) significa que este servicio es un Singleton:
 * - Se crea una sola instancia para toda la aplicaci√≥n
 * - Se puede inyectar en cualquier componente o servicio
 * - Angular se encarga de su ciclo de vida
 */
@Injectable({
  providedIn: 'root',  // Singleton a nivel de aplicaci√≥n
})
export class AuthService {
  
  // --- INYECCI√ìN DE DEPENDENCIAS ---
  // Usamos inject() (forma moderna de Angular) en lugar del constructor
  private userService: UserService = inject(UserService);  // Servicio para operaciones con usuarios en Firestore
  private router: Router = inject(Router);                 // Router para navegaci√≥n
  private firestore: Firestore = inject(Firestore);        // Instancia de Firestore

  // --- CONSTANTES ---
  // Clave para guardar la sesi√≥n en localStorage del navegador
  private readonly USER_STORAGE_KEY = 'app_user_session';
  
  // Referencia a la suscripci√≥n de Firestore (para poder cancelarla despu√©s)
  private userSubscription: Unsubscribe | null = null;

  // --- SIGNAL DEL USUARIO ACTUAL ---
  // Signal es la nueva forma reactiva de Angular (desde v16)
  // Ventajas sobre BehaviorSubject:
  // - M√°s simple y directo
  // - Mejor rendimiento
  // - Integraci√≥n nativa con Angular
  // 
  // Valores posibles:
  // - undefined: No sabemos a√∫n si hay sesi√≥n (estado inicial)
  // - null: No hay sesi√≥n activa (usuario no logueado)
  // - AppUser: Hay un usuario logueado
  currentUserSignal = signal<AppUser | null | undefined>(undefined);

  /**
   * Constructor del servicio.
   * Se ejecuta una sola vez cuando Angular crea la instancia.
   */
  constructor() {
    // Al iniciar el servicio, intentamos restaurar la sesi√≥n guardada
    this.cargarSesionDesdeStorage();
  }

  private cargarSesionDesdeStorage(): void {
    console.log('üîê Cargando sesi√≥n desde localStorage...');
    
    try {
      const userDataString = localStorage.getItem(this.USER_STORAGE_KEY);
      console.log('üì¶ Datos en localStorage:', userDataString);

      if (userDataString) {
        const appUser: AppUser = JSON.parse(userDataString);
        console.log('üë§ Usuario parseado:', appUser);

        // --- VALIDACI√ìN DE SESI√ìN ---
        // Verificamos que el objeto de usuario tenga un ID. Si no lo tiene, la sesi√≥n es inv√°lida.
        if (appUser && appUser.id) {
          console.log('‚úÖ Sesi√≥n v√°lida encontrada, restaurando usuario:', appUser.email);
          this.currentUserSignal.set(appUser);
          this.listenToCurrentUser(appUser.id);
        } else {
          // Si los datos son inv√°lidos, limpiamos todo.
          console.error('‚ùå Sesi√≥n inv√°lida encontrada en localStorage. Limpiando...');
          localStorage.removeItem(this.USER_STORAGE_KEY);
          this.currentUserSignal.set(null);
        }
      } else {
        console.log('üì≠ No hay datos de sesi√≥n en localStorage');
        this.currentUserSignal.set(null);
      }
    } catch (error) {
      console.error('‚ùå Error al cargar la sesi√≥n desde localStorage:', error);
      this.currentUserSignal.set(null);
    }
  }

  /**
   * Se suscribe a los cambios del documento del usuario actual en Firestore.
   * @param userId - El ID del usuario a escuchar.
   */
  private listenToCurrentUser(userId: string): void {
    console.log('üîç Iniciando suscripci√≥n a usuario:', userId);
    
    if (this.userSubscription) {
      console.log('üö´ Cancelando suscripci√≥n anterior');
      this.userSubscription();
    }

    const userDocRef = doc(this.firestore, 'users', userId);
    console.log('üìÑ Referencia del documento:', `users/${userId}`);
    
    this.userSubscription = onSnapshot(userDocRef, 
      (snapshot: DocumentSnapshot) => {
        console.log('üîÑ Snapshot recibido:', {
          exists: snapshot.exists(),
          id: snapshot.id,
          data: snapshot.exists() ? snapshot.data() : null
        });
        
        if (snapshot.exists()) {
          const updatedUser = { id: snapshot.id, ...snapshot.data() } as AppUser;
          console.log('‚úÖ Usuario actualizado desde Firestore:', updatedUser.email);
          this.currentUserSignal.set(updatedUser);
          localStorage.setItem(this.USER_STORAGE_KEY, JSON.stringify(updatedUser));
        } else {
          console.log('‚ùå Usuario no encontrado en Firestore, cerrando sesi√≥n');
          this.logout();
        }
      },
      (error) => {
        console.error('‚ùå Error en suscripci√≥n de Firestore:', error);
        console.error('‚ùå Detalles del error:', {
          code: error.code,
          message: error.message,
          userId: userId
        });
        // No cerrar sesi√≥n por errores de red, solo por usuario no encontrado
      }
    );
  }

  async login(email: string, password: string): Promise<void> {
    const userProfile = await this.userService.getUserByEmail(email);
    if (!userProfile) {
      throw new Error('El correo electr√≥nico o la contrase√±a son incorrectos.');
    }

    const passwordIsValid = userProfile.password && bcrypt.compareSync(password, userProfile.password);
    if (!passwordIsValid) {
      throw new Error('El correo electr√≥nico o la contrase√±a son incorrectos.');
    }

    const appUser: AppUser = {
      ...userProfile,
      id: userProfile.id, // Usar 'id' en lugar de 'uid'
    };

    localStorage.setItem(this.USER_STORAGE_KEY, JSON.stringify(appUser));
    this.currentUserSignal.set(appUser);

    this.listenToCurrentUser(appUser.id); // Usar 'id'

    this.router.navigate(['/']);
  }

  async logout(): Promise<void> {
    console.log('üöÄ Cerrando sesi√≥n de usuario');
    console.trace('üîç Stack trace del logout:'); // Para ver qui√©n llama al logout
    
    // Al cerrar sesi√≥n, cancelamos la suscripci√≥n a los cambios.
    if (this.userSubscription) {
      console.log('üö´ Cancelando suscripci√≥n de Firestore');
      this.userSubscription();
      this.userSubscription = null;
    }

    console.log('üóëÔ∏è Limpiando localStorage');
    localStorage.removeItem(this.USER_STORAGE_KEY);
    this.currentUserSignal.set(null);
    
    console.log('üì§ Redirigiendo a p√°gina principal');
    this.router.navigate(['/']);
  }
}
